/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 terrain.glb -S 
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useStore } from '../../hooks/useStore'
import { useControls } from 'leva'
import * as THREE from 'three'
import CustomShaderMaterial from "three-custom-shader-material"

import vertexShader from "./shaders/vertex.glsl"
import fragmentShader from "./shaders/fragment.glsl"
import { useFrame } from '@react-three/fiber'

export function Terrain(props) {
  const { nodes } = useGLTF('../../../public/models/terrain.glb')

  const waterLevel = useStore(state => state.waterLevel)

  const waveSpeed = useStore((state) => state.waveSpeed)
  const waveAmplitude = useStore((state) => state.waveAmplitude)
  const foamDepth = useStore((state) => state.foamDepth)

  // Interactive color parameters
  const { SAND_BASE_COLOR, GRASS_BASE_COLOR, UNDERWATER_BASE_COLOR } =
  useControls("Terrain", {
    SAND_BASE_COLOR: { value: "#ff9900", label: "Sand" },
    GRASS_BASE_COLOR: { value: "#85a02b", label: "Grass" },
    UNDERWATER_BASE_COLOR: { value: "#118a4f", label: "Underwater" }
  })

  // Convert color hex values to Three.js Color objects
  const SAND_COLOR = useMemo(
    () => new THREE.Color(SAND_BASE_COLOR),
    [SAND_BASE_COLOR]
  )
  const GRASS_COLOR = useMemo(
    () => new THREE.Color(GRASS_BASE_COLOR),
    [GRASS_BASE_COLOR]
  )
  const UNDERWATER_COLOR = useMemo(
    () => new THREE.Color(UNDERWATER_BASE_COLOR),
    [UNDERWATER_BASE_COLOR]
  )

  // Material
  const materialRef = useRef()

  // Update shader uniforms whenever control values change
  useEffect(() => {
    if (!materialRef.current) return

    materialRef.current.uniforms.uGrassColor.value = GRASS_COLOR
    materialRef.current.uniforms.uUnderwaterColor.value = UNDERWATER_COLOR
    materialRef.current.uniforms.uWaterLevel.value = waterLevel
  }, [
    GRASS_COLOR,
    UNDERWATER_COLOR,
    waterLevel
  ])

  // Update shader time
  useFrame(({ clock }) => {
    if (!materialRef.current) return
    materialRef.current.uniforms.uTime.value = clock.getElapsedTime()
  })

  return (
    <group {...props} dispose={null}>
      <mesh 
        geometry={nodes.plane.geometry} 
        // material={nodes.plane.material} 
        receiveShadow
      >
        <CustomShaderMaterial
          ref={materialRef}
          baseMaterial={THREE.MeshStandardMaterial}
          color={SAND_BASE_COLOR}
          vertexShader={vertexShader}
          fragmentShader={fragmentShader}
          uniforms={{
            uTime: { value: 0 },
            uGrassColor: { value: GRASS_COLOR },
            uUnderwaterColor: { value: UNDERWATER_COLOR },
            uWaterLevel: { value: waterLevel },
            uWaveSpeed: { value: waveSpeed },
            uWaveAmplitude: { value: waveAmplitude },
            uFoamDepth: { value: foamDepth },
          }}
        />
      </mesh>

      {/* Add a plane to extend the base */}
      <mesh
        rotation-x={-Math.PI / 2}
        position={[0, -0.01, 0]} // Moved it down to prevent the visual glitch from plane collision
        material={nodes.plane.material} // Using the same material for a seamless look
        receiveShadow
      >
        <meshStandardMaterial color={UNDERWATER_BASE_COLOR} />
        <planeGeometry args={[256, 256]} />
      </mesh>


    </group>
  )
}

useGLTF.preload('../../../public/models/terrain.glb')
