/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/dock.glb 
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useStore } from '../../hooks/useStore'
import { useControls } from 'leva'
import * as THREE from 'three'
import CustomShaderMaterial from "three-custom-shader-material"

import vertexShader from "./shaders/vertex.glsl"
import fragmentShader from "./shaders/fragment.glsl"
import { useFrame } from '@react-three/fiber'



export function Dock(props) {
  const { nodes, materials } = useGLTF('/models/dock.glb')


  const waterLevel = useStore(state => state.waterLevel)

  const waveSpeed = useStore((state) => state.waveSpeed)
  const waveAmplitude = useStore((state) => state.waveAmplitude)
  const foamDepth = useStore((state) => state.foamDepth)

  // Interactive color parameters
  const { DOCK_BASE_COLOR } =
  useControls("Dock", {
    DOCK_BASE_COLOR: { value: "#b47e66", label: "Dock" },
  })

  // Convert color hex values to Three.js Color objects
  const DOCK_COLOR = useMemo(
    () => new THREE.Color(DOCK_BASE_COLOR),
    [DOCK_BASE_COLOR]
  )

  // Material
  const materialRef = useRef()

  // Update shader uniforms whenever control values change
  useEffect(() => {
    if (!materialRef.current) return

    materialRef.current.uniforms.uDockColor.value = DOCK_COLOR
    materialRef.current.uniforms.uWaterLevel.value = waterLevel
  }, [
    DOCK_COLOR,

    waterLevel
  ])

  // Update shader time
  useFrame(({ clock }) => {
    if (!materialRef.current) return
    materialRef.current.uniforms.uTime.value = clock.getElapsedTime()
  })

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.dock.geometry} position={[-19.159, 0.81, -2.541]} rotation={[-Math.PI, 1.029, -Math.PI]}>
        <meshStandardMaterial color={DOCK_BASE_COLOR} />
      </mesh>
      <mesh geometry={nodes.dockposts.geometry} position={[-19.763, 0.115, -2.735]} rotation={[-Math.PI, 1.029, -Math.PI]}>
        <CustomShaderMaterial
          ref={materialRef}
          baseMaterial={THREE.MeshStandardMaterial}
          color={DOCK_BASE_COLOR}
          vertexShader={vertexShader}
          fragmentShader={fragmentShader}
          uniforms={{
            uTime: { value: 0 },
            uDockColor: { value: DOCK_COLOR },
            uWaterLevel: { value: waterLevel },
            uWaveSpeed: { value: waveSpeed },
            uWaveAmplitude: { value: waveAmplitude },
            uFoamDepth: { value: foamDepth },
          }}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/models/dock.glb')
